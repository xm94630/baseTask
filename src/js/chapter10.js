/*******************************
* 第十章
* 正则表达式研究 实战
********************************/

var bee = (function(bee){

	/* 
	 * 研究案例1:
	 */
	bee.caseJ1 = function(){

		//有了上一个章节的铺垫，这个式子分析就简单多了
		//其实就是科学计数法的匹配
		var r = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/;  
		l(r.test('123'));
		l(r.test('+123'));
		l(r.test('-123'));
		l(r.test('+123.'));
		l(r.test('+123.123'));
		l(r.test('+123.123E100'));
		l(r.test('+123.123E-100'));
		l(r.test('+123.123e-100'));
		l(r.test('+123.123e-123'));
		l(r.test('+.123e-123'));
	}


	/* 
	 * 研究案例2:自测
	 * 正则表达式匹配开头为11N, 12N或1NNN，后面是-7-8个数字的电话号码
	 */
	bee.caseJ2 = function(){

		var r = /1(?:1\d|2\d|\d{3})-\d{7,8}/;  
		l(r.test('112-1234567'));
		l(r.test('122-1234567'));
		l(r.test('1789-1234567'));
		l(r.test('1789-12345678'));
		l(r.test('222-12345678'));
	}

	/* 
	 * 研究案例3:一个小坑
	 */
	bee.caseJ3 = function(){

		//这个例子和下面的是有区别的，这个会变成死循环。。
		//看上去差别很小，其实大有玄机
		//这里的正则表达式是字面量，在每次做循环的时候，都是重新实例。
		//所以 lastIndex的值总是为零。
		/*while((arr=/\S+/g.exec('\n\r\f\v\b你好 \n哈哈')) !== null){
			l(arr);
		}*/
		
		var r = /\S+/g;
		l(r.lastIndex);
		while((arr=r.exec('\n\r\f\v\b你好 \n哈哈')) !== null){
			l(arr);
			l(r.lastIndex);
		}
	}


	return bee;
})(bee || {});


bee.caseJ3();














